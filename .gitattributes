# .gitattributes

# --- Line Ending Normalization ---
# Set default behavior for all files to auto-detect and normalize to LF on commit.
# This helps prevent issues with mixed line endings in a team.
* text=auto eol=lf

# Explicitly define common text files to ensure they are treated as text and use LF.
# Source Code & Shaders
*.cs text eol=lf
*.shader text eol=lf
*.cginc text eol=lf
*.hlsl text eol=lf
*.glsl text eol=lf
# Data & Config
*.json text eol=lf
*.xml text eol=lf
*.yml text eol=lf
*.yaml text eol=lf
*.txt text eol=lf
*.md text eol=lf
*.csv text eol=lf
# Unity Specific Text Files
*.asmdef text eol=lf
*.asmref text eol=lf
*.inputactions text eol=lf # New Input System

# --- Git LFS Tracking ---
# Mark these file types to be handled by Git LFS.
# The "-text" attribute tells Git not to try to convert line endings for these binary files.

# Textures
*.png filter=lfs diff=lfs merge=lfs -text
*.jpg filter=lfs diff=lfs merge=lfs -text
*.jpeg filter=lfs diff=lfs merge=lfs -text
*.tga filter=lfs diff=lfs merge=lfs -text
*.psd filter=lfs diff=lfs merge=lfs -text # Photoshop files can be very large
*.tif filter=lfs diff=lfs merge=lfs -text
*.tiff filter=lfs diff=lfs merge=lfs -text
*.exr filter=lfs diff=lfs merge=lfs -text # HDR Textures
*.gif filter=lfs diff=lfs merge=lfs -text
*.bmp filter=lfs diff=lfs merge=lfs -text

# 3D Models
*.fbx filter=lfs diff=lfs merge=lfs -text
*.obj filter=lfs diff=lfs merge=lfs -text
*.blend filter=lfs diff=lfs merge=lfs -text # Blender source files
*.max filter=lfs diff=lfs merge=lfs -text # 3ds Max files
*.ma filter=lfs diff=lfs merge=lfs -text   # Maya ASCII
*.mb filter=lfs diff=lfs merge=lfs -text   # Maya Binary
*.3ds filter=lfs diff=lfs merge=lfs -text
*.dae filter=lfs diff=lfs merge=lfs -text  # Collada

# Audio Files
*.wav filter=lfs diff=lfs merge=lfs -text
*.mp3 filter=lfs diff=lfs merge=lfs -text
*.ogg filter=lfs diff=lfs merge=lfs -text
*.aif filter=lfs diff=lfs merge=lfs -text
*.aiff filter=lfs diff=lfs merge=lfs -text
*.flac filter=lfs diff=lfs merge=lfs -text

# Video Files
*.mp4 filter=lfs diff=lfs merge=lfs -text
*.mov filter=lfs diff=lfs merge=lfs -text
*.avi filter=lfs diff=lfs merge=lfs -text
*.webm filter=lfs diff=lfs merge=lfs -text
*.ogv filter=lfs diff=lfs merge=lfs -text

# Substance Designer / Painter Files
*.sbsar filter=lfs diff=lfs merge=lfs -text
*.sbs filter=lfs diff=lfs merge=lfs -text   # Can be large
*.spp filter=lfs diff=lfs merge=lfs -text   # Substance Painter projects (often very large)

# Unity Specific Large Files
# WARNING: Use LFS for these with caution and team agreement.
# Many .asset files are small (ScriptableObjects, Material configs).
# However, Meshes, AnimationClips, or ScriptableObjects storing large data arrays
# can become very large. Consider scoping these to specific folders if needed.
# e.g., Assets/_ProjectF3/LargeAssets/**/*.asset filter=lfs diff=lfs merge=lfs -text
*.asset filter=lfs diff=lfs merge=lfs -text

# Scene files can become very large. LFS helps with repo size, but merging remains a challenge.
*.unity filter=lfs diff=lfs merge=lfs -text

# Prefabs can also become large if they embed mesh data or have complex hierarchies.
*.prefab filter=lfs diff=lfs merge=lfs -text

# Font files
*.otf filter=lfs diff=lfs merge=lfs -text
*.ttf filter=lfs diff=lfs merge=lfs -text

# Other large binary blobs
# *.bytes filter=lfs diff=lfs merge=lfs -text # If you store large binary data in .bytes files
# *.dll filter=lfs diff=lfs merge=lfs -text   # If you have large pre-compiled native libraries
# *.pdf filter=lfs diff=lfs merge=lfs -text   # If you store large PDFs (e.g., design docs) in the repo